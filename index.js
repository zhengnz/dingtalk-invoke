// Generated by CoffeeScript 1.12.4
(function() {
  var Model, Promise, _, invoke, url, utils;

  Promise = require('bluebird');

  invoke = require('./libs');

  _ = require('lodash');

  utils = require('utility');

  url = require('url');

  Model = (function() {
    function Model(config) {
      this.config = config;
      this.config = _.assign({
        getToken: function() {
          return Promise.resolve(null);
        },
        setToken: function(token, expires) {
          return Promise.resolve();
        },
        getSnsToken: function() {
          return Promise.resolve(null);
        },
        setSnsToken: function(token, expires) {
          return Promise.resolve();
        },
        getJsApiTicket: function() {
          return Promise.resolve(null);
        },
        setJsApiTicket: function(ticket, expires) {
          return Promise.resolve();
        }
      }, this.config);
    }

    Model.prototype.invoke = function(path, params) {
      if (params == null) {
        params = {};
      }
      return invoke(path, params, this);
    };

    Model.prototype.getToken = function() {
      return this.config.getToken().then((function(_this) {
        return function(token) {
          if (token != null) {
            return Promise.resolve(token);
          }
          return _this.invoke('/gettoken', {
            corpid: _this.config.corpid,
            corpsecret: _this.config.corpsecret
          }).then(function(data) {
            token = data.access_token;
            return _this.config.setToken(token, (7200 - 100) * 1000).then(function() {
              return Promise.resolve(token);
            });
          });
        };
      })(this));
    };

    Model.prototype.getSnsToken = function() {
      return this.config.getSnsToken().then((function(_this) {
        return function(token) {
          if (token != null) {
            return Promise.resolve(token);
          }
          return _this.invoke('/sns/gettoken', {
            appid: _this.config.appid,
            appsecret: _this.config.appsecret
          }).then(function(data) {
            token = data.access_token;
            return _this.config.setSnsToken(token, (7200 - 100) * 1000).then(function() {
              return Promise.resolve(token);
            });
          });
        };
      })(this));
    };

    Model.prototype.getJsApiTicket = function() {
      return this.config.getJsApiTicket().then((function(_this) {
        return function(ticket) {
          if (ticket != null) {
            return Promise.resolve(ticket);
          }
          return _this.invoke('/get_jsapi_ticket', {
            type: 'jsapi'
          }).then(function(data) {
            ticket = data.ticket;
            return _this.config.setJsApiTicket(ticket, (7200 - 100) * 1000).then(function() {
              return Promise.resolve(ticket);
            });
          });
        };
      })(this));
    };

    Model.prototype.nonce_str = function() {
      return utils.randomString(32, '1234567890abcdefghijklmnopqrstuvwxyz').toUpperCase();
    };

    Model.prototype.getSignature = function(originUrl) {
      var newUrl, origUrlObj;
      origUrlObj = url.parse(originUrl);
      delete origUrlObj['hash'];
      newUrl = url.format(origUrlObj);
      return this.getJsApiTicket().then((function(_this) {
        return function(ticket) {
          var nonceStr, plain, timeStamp;
          nonceStr = _this.nonce_str();
          timeStamp = _.now();
          plain = "jsapi_ticket=" + ticket + "&noncestr=" + nonceStr + "&timestamp=" + timeStamp + "&url=" + newUrl;
          return Promise.resolve({
            nonceStr: nonceStr,
            timeStamp: timeStamp,
            signature: utils.sha1(plain)
          });
        };
      })(this));
    };

    return Model;

  })();

  module.exports = Model;

}).call(this);

//# sourceMappingURL=index.js.map
